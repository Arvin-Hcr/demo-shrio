1、什么是shrio：
	shiro是一个强大而且易用的Java框架，提供了认证、授权、加密、会话 管理、与web集成等功能能够提供全面的安全服务
2、shiro的三大核心：
	Subject：主体，代表了当前“用户”
	
	SecurityManager：安全管理器；所有与安全有关的操作都会与SecurityManager交互，它管理着所有Subject，是shiro的核心，相当于spring mvc中的dispatcher Servlet前端控制器
	
	Realm：域，shiro要从Realm中获取一些安全数据，比如用户、角色、权限，就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源
Shiro可以做哪些工作？
	Shiro可以帮助我们完成：认证、授权、加密、会话管理、与Web集成、缓存等
shiro有哪些组件？
	Authentication：身份认证/登录，验证用户是不是拥有相应的身份；
	
	Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；

	Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；

	Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；

	Web Support：Web支持，可以非常容易的集成到Web环境；

	Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；

	Concurrency：shiro支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；

	Testing：提供测试支持；

	Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；

	Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。

	记住一点，Shiro不会去维护用户、维护权限；这些需要我们自己去设计/提供；然后通过相应的接口注入给Shiro即可。
在shiro的用户权限认证过程中其通过两个方法来实现：
	1、Authentication：是验证用户身份的过程。
	2、Authorization：是授权访问控制，用于对用户进行的操作进行人证授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。
其他组件：
除了以上几个组件外，Shiro还有几个其他组件：
	1、SessionManager ：Shiro为任何应用提供了一个会话编程范式。
	2、CacheManager :对Shiro的其他组件提供缓存支持。 
Shiro工作流程：
	最简单的一个Shiro应用：
	1、应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；
	2、我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。

shiro 注解
	1、 @RequiresAuthentication :表示当前Subject已经通过login进行了身份验证；即 Subject.isAuthenticated() 返回 true
	2、@RequiresUser : 表示当前Subject 已经身份验证或者通过记住我登录的
	3、@RequiresGuest : 表示当前Subject没有身份验证或通过记住我登陆过，即是游客身份
	4、@RequiresRoles(value = { “admin”, “user” }, logical = Logical.AND) : 表示当前 Subject 需要角色 admin和user
	5、@RequiresPermissions(value = { “user:a”, “user:b” }, logical = Logical.OR) : 表示当前 Subject 需要权限 user:a 或 user:b

	<!--显示用户名-->
	<shiro:principal/>
	<!--认证以后的信息-->
	<shiro:user/>
	<!--游客模式显示的信息-->
	<shiro:guest></shiro:guest>
	<!--有某一个角色的时候显示的信息-->
	<shiro:hasRole></shiro:hasRole>
	<!--有某一个权限的时候显示的信息-->
	<shiro:hasPermission></shiro:hasPermission>
	<!--有很多角色的时候显示的信息-->
	<shiro:hasAnyRoles></shiro:hasAnyRoles>
	<!--认证成功后-->
	<shiro:authenticated></shiro:authenticated>
	<!--未认证-->
	<shiro:notAuthenticated></shiro:notAuthenticated>


shiro的优点
	1、 简单的身份验证，支持多种数据源
	2、对角色的简单授权，支持细粒度的授权（方法）
	3、支持一级缓存，以提升应用程序的性能
	4、内置基于POJO的企业会话管理，适用于web及非web环境
	5、非常简单的API加密
	6、不跟任何框架绑定，可以独立运行